stages:
- lint
- build
- test
- deploy

variables:
  CONTAINER_TEST_IMAGE: registry.gitlab.com/singuerinc-works/com.singuerinc.www:$CI_BUILD_TAG
  CONTAINER_RELEASE_IMAGE: registry.gitlab.com/singuerinc-works/com.singuerinc.www:latest

.lint: &lint-definition
  image: mhart/alpine-node:7.5.0
  stage: lint
  script:
  - npm i -g yarn
  - yarn
  - yarn run lint

.build: &build-definition
  image: jekyll/jekyll:3.2.1
  stage: build
  artifacts:
    paths:
    - public
    expire_in: 45 minutes
    untracked: true
  cache:
    paths:
    - node_modules/
  script:
  - apk add --update nodejs
  - npm i -g yarn
  - yarn
  - yarn run build:js
  - gem install redcarpet jekyll jekyll-sitemap
  - JEKYLL_ENV=test yarn run build -- --config _config.yml,_config-test.yml
  - yarn run build:css
  - rm $CI_PROJECT_DIR/public/robots.txt
  - 'printf "User-agent: *\nDisallow: /" > $CI_PROJECT_DIR/public/robots.txt'

.test-unit: &test-unit-definition
  image: mhart/alpine-node:7.5.0
  stage: test
  script:
  - npm i -g yarn
  - yarn
  - yarn run test
  - yarn run report

.deploy: &deploy-definition
  image: mhart/alpine-node:7.5.0
  stage: deploy
  variables:
    GIT_STRATEGY: none

test:lint:
  <<: *lint-definition
  environment: test
  only:
  - branches
  except:
  - master

test:build:
  <<: *build-definition
  environment: test
  only:
  - branches
  except:
  - master

test:unit_test:
  <<: *test-unit-definition
  environment: test
  only:
  - branches
  except:
  - master

test:deploy:
  <<: *deploy-definition
  environment: test
  script:
  - npm install -g surge
  - rm $CI_PROJECT_DIR/public/CNAME
  - printf "$TEST_DOMAIN" > $CI_PROJECT_DIR/public/CNAME
  - surge -p $CI_PROJECT_DIR/public
  only:
  - branches
  except:
  - master

staging:lint:
  <<: *lint-definition
  environment: staging
  only:
  - master

staging:build:
  <<: *build-definition
  environment: staging
  script:
  - apk add --update nodejs
  - npm i -g yarn
  - yarn
  - yarn run build:js -- -p
  - gem install redcarpet jekyll jekyll-sitemap
  - JEKYLL_ENV=staging yarn run build -- --config _config.yml,_config-staging.yml
  - yarn run build:css
  - rm $CI_PROJECT_DIR/public/robots.txt
  - 'printf "User-agent: *\nDisallow: /" > $CI_PROJECT_DIR/public/robots.txt'
  only:
  - master

staging:unit_test:
  <<: *test-unit-definition
  environment: staging
  only:
  - master

staging:deploy:
  <<: *deploy-definition
  environment: staging
  script:
  - npm install -g surge
  - rm $CI_PROJECT_DIR/public/CNAME
  - printf "$STAGING_DOMAIN" > $CI_PROJECT_DIR/public/CNAME
  - surge -p $CI_PROJECT_DIR/public
  only:
  - master

pages:lint:
  <<: *lint-definition
  environment: production
  only:
  - tags

pages:build:
  <<: *build-definition
  environment: production
  script:
  - apk add --update nodejs
  - npm i -g yarn
  - yarn
  - yarn run build:js -- -p
  - JEKYLL_ENV=test yarn run build
  - yarn run build:css
  only:
  - tags

pages:unit_test:
  <<: *test-unit-definition
  environment: production
  only:
  - tags

pages:
  image: ruby:2.1
  environment: production
  stage: deploy
  script:
  - gem install redcarpet jekyll jekyll-sitemap
  - JEKYLL_ENV=production jekyll build -d public
  - sed -i -e "s/\$ACME_FILE_NAME/$ACME_FILE_NAME/" ./acme_file_template
  - sed -i -e "s/\$ACME_FILE_CONTENT/$ACME_FILE_CONTENT/" ./acme_file_template
  - mkdir -p ./public/.well-known/acme-challenge/
  - mv ./acme_file_template ./public/.well-known/acme-challenge/$ACME_FILE_NAME
  artifacts:
    paths:
    - public
  only:
  - tags

pages:push-docker-images:
  image: docker:git
  services:
  - docker:dind
  environment: production
  stage: deploy
  script:
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
  - docker build -t $CONTAINER_TEST_IMAGE .
  - docker push $CONTAINER_TEST_IMAGE
  - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
  - docker push $CONTAINER_RELEASE_IMAGE
  only:
  - tags
